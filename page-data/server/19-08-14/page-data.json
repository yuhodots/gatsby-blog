{"componentChunkName":"component---src-templates-post-js","path":"/server/19-08-14/","result":{"data":{"markdownRemark":{"html":"<p>이전 포스팅에서는 SSL 인증을 받고 이를 도메인에 연결한 뒤 node.js 내 app.js에서 http 접속을 강제로 https로 리다이렉션 하는 방법에 대해 알아보았습니다. 이번에는 node.js가 아니라, nginx에서 https 리다이렉션을 구현하는 방법에 대해서 알아보도록 하겠습니다. 본 포스팅은 아래의 조건을 충족한 분들을 위한 포스팅입니다. </p>\n<ol>\n<li>SSL인증서를 발급 받았음</li>\n<li>AWS ELB를 이용해 인증서를 웹 사이트 도메인에 적용하였음</li>\n<li>Node.js의 프록시 서버로 Nginx를 사용하고 있음</li>\n</ol>\n<h3 id=\"https-redirection\" style=\"position:relative;\"><a href=\"#https-redirection\" aria-label=\"https redirection permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>HTTPS redirection</h3>\n<p> Classic Load Balancer는 아래의 X-Forwarded 헤더를 지원합니다. 저는 이 중 X-Forwarded-Proto 헤더를 이용하겠습니다.</p>\n<ul>\n<li>X-Forwarded-For : HTTP 또는 HTTPS 로드 밸런서를 사용할 때 클라이언트의 IP를 식별하는데 도움을 줌</li>\n<li>X-Forwarded-Proto : 클라이언트가 로드 밸런서 연결에 사용한 프로토콜(HTTP 또는 HTTPS)을 식별하는데 도움을 줌</li>\n<li>X-Forwarded-Port : 클라이언트가 로드 밸런서 연결에 사용한 대상 포트를 식별하는 데 도움을 줍니다.</li>\n</ul>\n<p> HTTPS redirection을 위해서는 nginx 환경설정 파일을 수정해야 합니다. nginx 환경설정은 /etc/nginx/ 디렉토리의 <strong>nginx.conf</strong>  파일이나, /etc/nginx/sites-enabled 디렉토리의 <strong>default</strong> 파일을 수정하면 됩니다. (저의 경우에는 /etc/nginx/sites-enabled 디렉토리의 <strong>default</strong> 파일을 수정하였습니다.)</p>\n<div class=\"gatsby-highlight\" data-language=\"sh\"><pre class=\"language-sh\"><code class=\"language-sh\">server {\n    listen 80 default_server;\n    listen [::]:80 default_server;\n    if ($http_x_forwarded_proto = &#39;http&#39;){\n        return 301 https://$host$request_uri;\n    }\n    ...    \n}</code></pre></div>\n<p> AWS에서는 Nginx 뿐만 아니라, Apache, IIS 서버에 대한 <a href=\"https://aws.amazon.com/ko/premiumsupport/knowledge-center/redirect-http-https-elb/\">HTTPS redirection 방법</a>에 대해 친절하게 설명 해 주고 있습니다. 저 또한 이 링크를 참고하였습니다.</p>\n<p> 위의 코드에서 우리가 주목할 것은 if문 밖에 없습니다. if문 내 <code class=\"language-text\">($http_x_forwarded_proto = &#39;http&#39;)</code> 조건은 <strong>클라이언트가 HTTP로 연결</strong>을 시도하였다는 의미입니다. 이 경우에는 <code class=\"language-text\">return 301 https://...</code> 명령이 실행되면서 <strong>클라이언트의 연결을 HTTPS 로 redirection</strong> 합니다. </p>\n<p><code class=\"language-text\">return 301 https://$host$request_uri</code> 를 상세히 살펴보면 아래와 같습니다.</p>\n<ul>\n<li>301: HTTP 응답 상태 코드 301은 영구적인 URL 리다이렉션을 의미합니다. </li>\n<li>$host: 서버의 도메인 주소를 의미합니다.</li>\n<li>$request_uri: 클라이언트가 요청한 url를 의미합니다.</li>\n</ul>\n<p> if문 두 줄을 nginx 환경설정에 추가함으로써 손 쉽게 HTTPS redirection을 구현 할 수 있었습니다.</p>","tableOfContents":"<ul>\n<li><a href=\"/Web/19-08-14-Nginx%20%EC%84%A4%EC%A0%95%EC%9D%84%20%ED%86%B5%ED%95%9C%20https%20%EB%A6%AC%EB%8B%A4%EC%9D%B4%EB%A0%89%EC%85%98/#https-redirection\">HTTPS redirection</a></li>\n</ul>","frontmatter":{"path":"/server/19-08-14/","title":"Nginx 설정을 통한 https 리다이렉션","category":"BackEnd","date":"2019-08-14"}}},"pageContext":{}},"staticQueryHashes":["2390655019","256249292","63159454"]}