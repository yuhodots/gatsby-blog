{"componentChunkName":"component---src-templates-post-js","path":"/mobile/24-09-29/","result":{"data":{"markdownRemark":{"html":"<blockquote>\n<p>iOS 앱 개발을 위해 flutter와 firebase를 사용할 때 필요한 과정을 나열식으로 정리합니다.</p>\n</blockquote>\n<h3 id=\"dart-basics\" style=\"position:relative;\"><a href=\"#dart-basics\" aria-label=\"dart basics permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Dart Basics</h3>\n<p>Dart는 Google에서 개발한 프로그래밍 언어로, Flutter 앱 개발을 위해 사용됩니다. JavaScript와 유사한 문법을 갖고 있으며, 높은 성능과 생산성을 제공합니다. 특히 클라이언트 측 애플리케이션을 만들기 위해 설계되었으며, UI를 직접 조작할 수 있는 장점이 있습니다.</p>\n<ul>\n<li>\n<p>변수 선언: <code class=\"language-text\">var</code>, <code class=\"language-text\">final</code>, <code class=\"language-text\">const</code>를 사용하여 변수를 선언할 수 있습니다. </p>\n<ul>\n<li>Dart는 자료형이 엄격한 언어입니다. Dart는 정적 타입 언어이지만, 변수 선언 시 자료형을 명시하지 않으면 Dart가 자동으로 자료형을 추론합니다. 따라서 <code class=\"language-text\">var</code> 키워드를 사용하면 자료형을 명시하지 않아도, 값에 따라 자료형이 결정됩니다.</li>\n<li><code class=\"language-text\">var</code>: 변수를 처음 초기화할 때 할당된 값에 따라 자료형이 결정됩니다. 한 번 자료형이 결정되면, 그 자료형 외의 값은 할당할 수 없습니다.</li>\n<li><code class=\"language-text\">final</code>: 키워드는 한 번만 값을 할당할 수 있는 변수를 선언할 때 사용됩니다. 값을 한 번 할당하면 더 이상 변경할 수 없습니다. <code class=\"language-text\">final</code> 변수는 실행 시점에 초기화될 수 있습니다.</li>\n<li><code class=\"language-text\">const</code>: 컴파일 시점에 값을 고정시키는 상수를 선언할 때 사용됩니다. <code class=\"language-text\">const</code>는 <code class=\"language-text\">final</code>과 달리, 컴파일 타임에 값을 알고 있어야 하며, 프로그램 실행 중 절대 변경되지 않습니다.</li>\n<li>이러한 변수 선언 방법은 Dart의 코드 안정성을 높이고, 의도치 않은 값 변경을 방지하는 데 도움이 됩니다.</li>\n</ul>\n</li>\n<li>\n<p>함수: Dart에서는 함수가 1급 객체로 간주되며, 콜백 함수로 자주 사용됩니다.</p>\n<ul>\n<li>함수가 1급 객체인 경우, 고차함수(Higher order function)를 만들 수 있고, 콜백(callback)을 사용할 수 있습니다.</li>\n</ul>\n</li>\n<li>클래스: Dart는 객체지향 프로그래밍 언어로, 클래스를 사용하여 객체를 정의할 수 있습니다.</li>\n<li>비동기 프로그래밍: Dart는 <code class=\"language-text\">async</code>, <code class=\"language-text\">await</code> 키워드를 사용해 비동기 프로그래밍을 쉽게 처리할 수 있습니다.</li>\n<li>Garbage Collection(가비지 컬렉션): Dart는 메모리를 자동으로 관리하는 가비지 컬렉션 기능을 제공합니다. 사용되지 않는 메모리를 자동으로 정리해주므로, 개발자는 메모리 관리에 신경 쓸 필요가 없습니다.</li>\n<li>JIT &#x26; AOT 컴파일: Dart는 JIT(Just-In-Time) 컴파일과 AOT(Ahead-Of-Time) 컴파일을 모두 지원합니다. JIT는 개발 중 핫 리로드와 같은 빠른 피드백을 제공하고, AOT는 릴리스 시 최적화된 성능을 제공합니다.</li>\n</ul>\n<h3 id=\"flutter-basics\" style=\"position:relative;\"><a href=\"#flutter-basics\" aria-label=\"flutter basics permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Flutter Basics</h3>\n<p>Flutter는 Google이 만든 오픈 소스 UI 소프트웨어 개발 키트(SDK)로, 단일 코드베이스로 iOS와 Android 애플리케이션을 개발할 수 있게 해줍니다. Flutter는 네이티브 앱과 거의 동일한 성능을 제공하면서도, 간단한 코드로 복잡한 UI를 구성할 수 있습니다.</p>\n<ul>\n<li>위젯: Flutter 앱은 모든 것이 위젯으로 구성됩니다. 버튼, 텍스트, 레이아웃 모두 위젯으로 표현됩니다.</li>\n<li>StatelessWidget vs StatefulWidget: 변화가 없는 위젯은 <code class=\"language-text\">StatelessWidget</code>으로, 상태가 변경될 수 있는 위젯은 <code class=\"language-text\">StatefulWidget</code>으로 정의합니다.</li>\n<li>레이아웃 구성: <code class=\"language-text\">Row</code>, <code class=\"language-text\">Column</code>, <code class=\"language-text\">Stack</code> 등을 사용하여 복잡한 UI를 손쉽게 구성할 수 있습니다.</li>\n<li>핫 리로드(Hot Reload): Flutter의 가장 큰 장점 중 하나는 코드 변경 후 앱을 바로 확인할 수 있는 핫 리로드 기능입니다.</li>\n</ul>\n<h3 id=\"flutter-gitignore\" style=\"position:relative;\"><a href=\"#flutter-gitignore\" aria-label=\"flutter gitignore permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Flutter .gitignore</h3>\n<p>Flutter 프로젝트를 만들 때 ignore 처리해야하는 요소들은 다음과 같습니다. 전체 .gitignore 파일을 <a href=\"https://github.com/yuhodots/flutter/blob/main/.gitignore\">제 프로젝트 저장소</a>에서 확인하실 수 있습니다. </p>\n<ul>\n<li><code class=\"language-text\">firebase_options.dart</code>: Firebase 설정 정보를 담고 있는 파일입니다. Firebase API 키, 프로젝트 ID, 앱 ID 등 민감한 정보가 포함되어 있습니다.</li>\n<li><code class=\"language-text\">google-services.json</code> (Android): Android Firebase 설정 파일로, Firebase 프로젝트와 Android 앱 간의 연결을 설정하는 파일입니다.</li>\n<li><code class=\"language-text\">GoogleService-Info.plist</code> (iOS): iOS Firebase 설정 파일로, Firebase 프로젝트와 iOS 앱 간의 연결을 설정하는 파일입니다.</li>\n<li><code class=\"language-text\">.env</code> 또는 환경 변수 파일: 환경 변수 파일에는 API 키, DB 연결 정보, 비밀 토큰 등이 포함될 수 있습니다.</li>\n<li>\n<p><code class=\"language-text\">.keystore</code> 파일 (Android): Android 서명 키 파일로, 앱이 Play Store에 배포될 때 서명에 사용됩니다.</p>\n<ul>\n<li><code class=\"language-text\">key.properties</code> 파일도 노출되지 않도록 <code class=\"language-text\">.gitignore</code>에 추가해야 합니다. 이 파일에는 keystore 위치와 암호 정보가 포함될 수 있습니다.</li>\n</ul>\n</li>\n<li><code class=\"language-text\">pubspec.lock</code>: 패키지 버전 정보가 포함된 파일입니다. 이 파일 자체는 큰 위험 요소는 아니지만, 특정 패키지 버전과 관련된 취약점이 있을 수 있기 때문에 민감한 환경에서는 주의할 필요가 있습니다.</li>\n<li><code class=\"language-text\">.flutter_secure_storage</code> 데이터 (사용 시): 만약 Flutter Secure Storage 같은 패키지를 사용하여 중요한 데이터를 암호화해서 저장하고 있다면, 이 데이터 역시 안전하게 관리되어야 합니다.</li>\n<li>그 외 iOS 관련: provisioning profiles이나 certificate 파일 등이 포함될 수 있습니다. 이들은 앱 서명과 배포에 사용되므로 노출되지 않도록 관리해야 합니다.</li>\n</ul>\n<h3 id=\"flutter-ios-설정\" style=\"position:relative;\"><a href=\"#flutter-ios-%EC%84%A4%EC%A0%95\" aria-label=\"flutter ios 설정 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Flutter iOS 설정</h3>\n<p>Android Studio에서 Flutter 프로젝트는 아래와 같은 절차를 통해 생성할 수 있습니다. 혹은 <code class=\"language-text\">flutter create &lt;project_name&gt;</code> 명령어를 사용할 수도 있습니다.</p>\n<ol>\n<li>Android Studio를 실행한 후, <code class=\"language-text\">New Flutter Project</code>를 선택합니다.</li>\n<li>Flutter SDK 경로를 설정한 후 프로젝트를 생성합니다.</li>\n<li>iOS 프로젝트를 빌드할 수 있도록 Xcode 설치가 필요하며, iOS 시뮬레이터를 사용해 개발 환경을 테스트할 수 있습니다.</li>\n<li><code class=\"language-text\">pubspec.yaml</code> 파일에서 필요한 의존성을 추가(<code class=\"language-text\">flutter pub add &lt;dependency&gt;</code>)하고, <code class=\"language-text\">flutter pub get</code> 명령어로 패키지를 설치합니다.</li>\n<li><code class=\"language-text\">flutter build ios</code> 명령어로 iOS 빌드를 진행할 수 있으며, 앱을 실제 기기나 시뮬레이터에서 실행할 수 있습니다.</li>\n</ol>\n<p>사용중인 iPhone을 직접 연결하여 실제 디바이스에서 테스트해볼 수도 있습니다.</p>\n<ol>\n<li>사용 중인 iPhone을 USB로 Mac에 연결합니다.</li>\n<li>iPhone의 개발자 모드를 켭니다 (Settings > Privacy > Developer Mode)</li>\n<li>CocoaPods 최신 버전이 Mac에 설치되어있는지 확인합니다(<code class=\"language-text\">pod --version</code>). 설치하려면 <code class=\"language-text\">sudo gem install cocoapods</code> 명령어를 사용합니다.</li>\n<li>Xcode의 연결된 기기 내역에서 iPhone이 제대로 연결되어있는지 확인합니다. </li>\n<li>Xcode에서 Apple developer team 설정을 합니다. (Runner > Targets > Runner > Signing &#x26; Capabilities)</li>\n<li>Xcode 상에서 앱을 빌드하면 iPhone에 flutter 앱이 생성된 것을 확인할 수 있습니다.</li>\n</ol>\n<h3 id=\"firebase-설정\" style=\"position:relative;\"><a href=\"#firebase-%EC%84%A4%EC%A0%95\" aria-label=\"firebase 설정 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Firebase 설정</h3>\n<p>Firebase는 Google이 제공하는 백엔드 서비스 플랫폼으로, 데이터베이스, 인증, 호스팅, 클라우드 기능 등을 제공해 모바일 애플리케이션 개발을 쉽게 지원합니다.</p>\n<ul>\n<li>Authentication: 이메일/패스워드, 소셜 로그인 등의 다양한 인증 방식 제공.</li>\n<li>Firestore: 실시간 데이터베이스로 사용자 간 실시간 데이터 동기화가 가능.</li>\n<li>Storage: 파일 저장 및 관리 기능을 제공.</li>\n<li>Cloud Messaging: 푸시 알림을 쉽게 구현할 수 있음</li>\n</ul>\n<p>앱에 Firebase를 추가하는 과정을 아래에 기록합니다.</p>\n<ol>\n<li><a href=\"https://console.firebase.google.com/u/0/?hl=ko\">Firebase console</a> 사이트에서 프로젝트 만들기 버튼을 클릭하고 프로젝트를 생성합니다.</li>\n<li>\n<p><a href=\"https://firebase.google.com/docs/cli?hl=ko&#x26;authuser=0&#x26;_gl=1*56jgyc*_ga*NzUyNDIxMTY4LjE3Mjc1OTQyMDQ.*_ga_CW55HF8NVT*MTcyNzU5NDIzMS4xLjEuMTcyNzU5NDM4MS4xMS4wLjA.#install_the_firebase_cli\">Firebase CLI</a>를 설치하고 <code class=\"language-text\">firebase login</code>으로 로그인 합니다.</p>\n<ul>\n<li>MacOS에서의 Firebase CLI 설치 방법: <code class=\"language-text\">curl -sL https://firebase.tools | bash</code></li>\n</ul>\n</li>\n<li>FlutterFire CLI를 설치하기 위해 <code class=\"language-text\">dart pub global activate flutterfire_cli</code> 명령어를 입력합니다.</li>\n<li>\n<p>FlutterFire CLI의 경로를 설정합니다. </p>\n<ul>\n<li><code class=\"language-text\">export PATH=&quot;$PATH&quot;:&quot;$HOME/.pub-cache/bin&quot;</code></li>\n<li><code class=\"language-text\">source ~/.zshrc</code></li>\n</ul>\n</li>\n<li>프로젝트 페이지에서 <code class=\"language-text\">flutterfire configure --project=&lt;ProjectID&gt;</code> 명령어를 입력하여 Firebase 프로젝트를 Flutter 프로젝트에 연결합니다.</li>\n<li><code class=\"language-text\">flutter pub add firebase_core</code>를 통해 firebase_core 의존성을 추가합니다.</li>\n<li><code class=\"language-text\">flutter pub get</code>을 통해 명시된 의존성을 모두 설치하고 적용합니다.</li>\n</ol>\n<h3 id=\"app-개발하기\" style=\"position:relative;\"><a href=\"#app-%EA%B0%9C%EB%B0%9C%ED%95%98%EA%B8%B0\" aria-label=\"app 개발하기 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>App 개발하기</h3>\n<p>Flutter에서 Firebase를 활용한 앱 개발은 다음과 같은 방식으로 시작할 수 있습니다. </p>\n<ol>\n<li>해당 저장소의 <code class=\"language-text\">lib</code> 디렉토리 내 코드를 참고하여 코드를 작성합니다.</li>\n<li>해당 저장소의 res/api 내 저장소의 데이터를 다운받고, pubspec.yaml의 asset 항목에 추가합니다.</li>\n<li>firebase<em>analytics, firebase</em>database, firebase<em>remote</em>config, firebase<em>crashlytics, connectivity</em>plus 패키지를 <code class=\"language-text\">flutter pub add</code>를 통해 추가합니다.</li>\n<li><code class=\"language-text\">flutter pub get</code>을 통해 프로젝트에 패키지를 설치합니다.</li>\n<li>Firebase에서 필요한 세팅들을 마칩니다. (Remote config, Realtime Database 등)</li>\n<li>\n<p>Rub main.dart 버튼을 눌러 프로젝트를 빌드합니다.</p>\n<ul>\n<li>Multidex support 에러 발생시: <code class=\"language-text\">android/app/build.gradle</code> 파일의 defaultConfig에 <code class=\"language-text\">multiDexEnabled true</code>를 추가해주고, dependencies에 <code class=\"language-text\">implementation &#39;com.android.support:multidex:2.0.1&#39;</code>를 추가</li>\n</ul>\n</li>\n</ol>","tableOfContents":"<ul>\n<li><a href=\"/Web/24-09-29%20iOS%20%E1%84%8B%E1%85%A2%E1%86%B8%20%E1%84%80%E1%85%A2%E1%84%87%E1%85%A1%E1%86%AF%E1%84%8B%E1%85%B3%E1%86%AF%20%E1%84%8B%E1%85%B1%E1%84%92%E1%85%A1%E1%86%AB%20Flutter%E1%84%8B%E1%85%AA%20Firebase%20%E1%84%89%E1%85%A5%E1%86%AF%E1%84%8C%E1%85%A5%E1%86%BC/#dart-basics\">Dart Basics</a></li>\n<li><a href=\"/Web/24-09-29%20iOS%20%E1%84%8B%E1%85%A2%E1%86%B8%20%E1%84%80%E1%85%A2%E1%84%87%E1%85%A1%E1%86%AF%E1%84%8B%E1%85%B3%E1%86%AF%20%E1%84%8B%E1%85%B1%E1%84%92%E1%85%A1%E1%86%AB%20Flutter%E1%84%8B%E1%85%AA%20Firebase%20%E1%84%89%E1%85%A5%E1%86%AF%E1%84%8C%E1%85%A5%E1%86%BC/#flutter-basics\">Flutter Basics</a></li>\n<li><a href=\"/Web/24-09-29%20iOS%20%E1%84%8B%E1%85%A2%E1%86%B8%20%E1%84%80%E1%85%A2%E1%84%87%E1%85%A1%E1%86%AF%E1%84%8B%E1%85%B3%E1%86%AF%20%E1%84%8B%E1%85%B1%E1%84%92%E1%85%A1%E1%86%AB%20Flutter%E1%84%8B%E1%85%AA%20Firebase%20%E1%84%89%E1%85%A5%E1%86%AF%E1%84%8C%E1%85%A5%E1%86%BC/#flutter-gitignore\">Flutter .gitignore</a></li>\n<li><a href=\"/Web/24-09-29%20iOS%20%E1%84%8B%E1%85%A2%E1%86%B8%20%E1%84%80%E1%85%A2%E1%84%87%E1%85%A1%E1%86%AF%E1%84%8B%E1%85%B3%E1%86%AF%20%E1%84%8B%E1%85%B1%E1%84%92%E1%85%A1%E1%86%AB%20Flutter%E1%84%8B%E1%85%AA%20Firebase%20%E1%84%89%E1%85%A5%E1%86%AF%E1%84%8C%E1%85%A5%E1%86%BC/#flutter-ios-%EC%84%A4%EC%A0%95\">Flutter iOS 설정</a></li>\n<li><a href=\"/Web/24-09-29%20iOS%20%E1%84%8B%E1%85%A2%E1%86%B8%20%E1%84%80%E1%85%A2%E1%84%87%E1%85%A1%E1%86%AF%E1%84%8B%E1%85%B3%E1%86%AF%20%E1%84%8B%E1%85%B1%E1%84%92%E1%85%A1%E1%86%AB%20Flutter%E1%84%8B%E1%85%AA%20Firebase%20%E1%84%89%E1%85%A5%E1%86%AF%E1%84%8C%E1%85%A5%E1%86%BC/#firebase-%EC%84%A4%EC%A0%95\">Firebase 설정</a></li>\n<li><a href=\"/Web/24-09-29%20iOS%20%E1%84%8B%E1%85%A2%E1%86%B8%20%E1%84%80%E1%85%A2%E1%84%87%E1%85%A1%E1%86%AF%E1%84%8B%E1%85%B3%E1%86%AF%20%E1%84%8B%E1%85%B1%E1%84%92%E1%85%A1%E1%86%AB%20Flutter%E1%84%8B%E1%85%AA%20Firebase%20%E1%84%89%E1%85%A5%E1%86%AF%E1%84%8C%E1%85%A5%E1%86%BC/#app-%EA%B0%9C%EB%B0%9C%ED%95%98%EA%B8%B0\">App 개발하기</a></li>\n</ul>","frontmatter":{"path":"/mobile/24-09-29/","title":"iOS 앱 개발을 위한 Flutter와 Firebase 설정","category":"Mobile","date":"2024-09-29"}}},"pageContext":{}},"staticQueryHashes":["2390655019","256249292","63159454"]}