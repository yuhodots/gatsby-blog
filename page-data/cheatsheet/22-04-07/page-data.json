{"componentChunkName":"component---src-templates-post-js","path":"/cheatsheet/22-04-07/","result":{"data":{"markdownRemark":{"html":"<blockquote>\n<p>Ray Tune 도큐먼트를 읽고 자주 사용할 만한 기능들을 기록합니다. 공부를 진행하면서 내용을 계속해서 업데이트하고 있으며, 이 과정에서 직접 사용해본 코드 예시 또한 추가하고 있습니다.</p>\n</blockquote>\n<h3 id=\"ray-core\" style=\"position:relative;\"><a href=\"#ray-core\" aria-label=\"ray core permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Ray Core</h3>\n<p>Ray에는 크게 Task, Object, Actor라는 세 가지 요소가 존재합니다. </p>\n<h5 id=\"task-remote-function\" style=\"position:relative;\"><a href=\"#task-remote-function\" aria-label=\"task remote function permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Task: Remote function</h5>\n<ul>\n<li>호출자와 다른 프로세스에서 실행되는 함수입니다. </li>\n<li>일반적인 function은 stateless task, class 내의 method는 stateful task라고 말합니다.</li>\n<li>호출자와 비동기적으로 실행됩니다.</li>\n<li><code class=\"language-text\">@ray.remote</code> 데커레이터를 통해 task를 만들 수 있으며 <code class=\"language-text\">.remote()</code> 메소드를 통해 호출 가능합니다.</li>\n<li>Object ref 값을 리턴하는데 이 값은 <code class=\"language-text\">ray.get</code>을 통해 반환 받을 수 있습니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@ray<span class=\"token punctuation\">.</span>remote</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">remote_func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n\nobj_ref <span class=\"token operator\">=</span> remote_func<span class=\"token punctuation\">.</span>remote<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">assert</span> ray<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>obj_ref<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span></code></pre></div>\n<h5 id=\"object\" style=\"position:relative;\"><a href=\"#object\" aria-label=\"object permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Object</h5>\n<ul>\n<li>Ray가 만드는 객체를 <strong>remote object</strong>라고 합니다. </li>\n<li>Remote object는 <strong>object ref</strong>라는 unique ID에 의해 참조될 수 있습니다.</li>\n<li>Object ref는 <code class=\"language-text\">put</code>에 의해 반환되거나 remote function(task) call에 의해 반환됩니다.</li>\n<li>위에서 언급했듯이 <code class=\"language-text\">get</code> method를 사용하여 obejct ref로 부터 remote object의 결과를 불러올 수 있습니다. </li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">y <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\nobject_ref <span class=\"token operator\">=</span> ray<span class=\"token punctuation\">.</span>put<span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span></code></pre></div>\n<h5 id=\"actor-remote-class\" style=\"position:relative;\"><a href=\"#actor-remote-class\" aria-label=\"actor remote class permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Actor: Remote class</h5>\n<ul>\n<li><code class=\"language-text\">@ray.remote</code> 데커레이터를 통해 actor를 만들 수 있으며 이 클래스의 메서드 호출은 stateful task가 됩니다</li>\n<li>서로 다른 actor의 method는 병렬적으로 호출되며, 동일한 actor의 method는 순차적으로 호출됩니다.</li>\n<li>동일한 actor는 state를 공유합니다. 이는 아래 예시에서 확인할 수 있습니다. </li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@ray<span class=\"token punctuation\">.</span>remote</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Counter</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">increment</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>value <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>value</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">counters <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>Counter<span class=\"token punctuation\">.</span>remote<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n\nresults <span class=\"token operator\">=</span> ray<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">.</span>increment<span class=\"token punctuation\">.</span>remote<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> c <span class=\"token keyword\">in</span> counters<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># prints [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]</span>\n\nresults <span class=\"token operator\">=</span> ray<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>counters<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>increment<span class=\"token punctuation\">.</span>remote<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">)</span>  <span class=\"token comment\"># prints [2, 3, 4, 5, 6]</span></code></pre></div>\n<h3 id=\"key-components\" style=\"position:relative;\"><a href=\"#key-components\" aria-label=\"key components permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Key Components</h3>\n<p>Ray Tune의 주요 기능들입니다.</p>\n<ul>\n<li><a href=\"https://docs.ray.io/en/latest/tune/key-concepts.html#trainables\">Trainables</a>: <code class=\"language-text\">tune.run</code>에 전달하여 튜닝을 수행할 function 혹은 class</li>\n<li>\n<p><a href=\"https://docs.ray.io/en/latest/tune/key-concepts.html#hyperparameters\">Hyperparameters</a>: <code class=\"language-text\">tune.run</code>에 <code class=\"language-text\">config</code> 파라미터로 전달할 하이퍼파라미터 dictionary</p>\n<ul>\n<li><a href=\"https://docs.ray.io/en/latest/tune/key-concepts.html#search-spaces\">Search spaces</a>: 하이퍼파라미터 search space와 sampling methods (e.g. uniform, normal, ...)</li>\n</ul>\n</li>\n<li><a href=\"https://docs.ray.io/en/latest/tune/key-concepts.html#tune-run-and-trials\">tune.run and Trials</a>: 하이퍼파라미터 튜닝 수행. 각 실험은 <code class=\"language-text\">Trial</code> object의 형태로 감싸져 독립적으로 수행</li>\n<li><a href=\"https://docs.ray.io/en/latest/tune/key-concepts.html#search-algorithms\">Search Algorithms</a>: Nevergrad, HyperOpt와 같은 유명한 search algorithm이 내부적으로 통합되어 있음</li>\n<li><a href=\"https://docs.ray.io/en/latest/tune/key-concepts.html#trial-schedulers\">Trial Schedulers</a>: Early terminate, Pause trials, Alter hyperparameters of a running trial 등의 기능 수행</li>\n<li><a href=\"https://docs.ray.io/en/latest/tune/key-concepts.html#analysis\">Analysis</a>: <code class=\"language-text\">tune.run</code>이 리턴하는 ExperimentAnalysis object로, 학습 결과 분석을 위해 사용</li>\n</ul>\n<p>전체적으로는 Trainable와 Hyperparameter를 정의하여 이를 <code class=\"language-text\">tune.run</code>에 전달하면, 활용 가능한 리소스에서 각각 독립적인 Trial process가 실행됩니다. 이때 Search Algorithm은 <code class=\"language-text\">search_alg</code> 파라미터를 통해 설정할 수 있습니다. 이 과정을 대략적인 코드로 표현하면 아래와 같습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">SearchSpace <span class=\"token operator\">=</span> tune<span class=\"token punctuation\">.</span>uniform<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\nHyperparameter <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">:</span> SearchSpace <span class=\"token punctuation\">}</span>\nSearchAlgorithm <span class=\"token operator\">=</span> ConcurrencyLimiter<span class=\"token punctuation\">(</span>BayesOptSearch<span class=\"token punctuation\">(</span>random_search_steps<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> max_concurrent<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\nTrialScheduler <span class=\"token operator\">=</span> HyperBandScheduler<span class=\"token punctuation\">(</span>metric<span class=\"token operator\">=</span><span class=\"token string\">\"score\"</span><span class=\"token punctuation\">,</span> mode<span class=\"token operator\">=</span><span class=\"token string\">\"max\"</span><span class=\"token punctuation\">)</span>\n\nAnalysis <span class=\"token operator\">=</span> tune<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>Trainable<span class=\"token punctuation\">,</span> \n                    config<span class=\"token operator\">=</span>Hyperparameter<span class=\"token punctuation\">,</span> \n                    search_alg<span class=\"token operator\">=</span>SearchAlgorithm<span class=\"token punctuation\">,</span> \n                    scheduler<span class=\"token operator\">=</span>TrialScheduler<span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"examples\" style=\"position:relative;\"><a href=\"#examples\" aria-label=\"examples permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Examples</h3>\n<p>Tune은 자동적으로 모든 cores/GPU를 활용해 병렬적으로 작동합니다. core 수를 제한하고 싶은 경우에는 <code class=\"language-text\">tune.run</code>을 실행하기 전에 <code class=\"language-text\">ray.init(num_cpus=&lt;int&gt;, num_gpus=&lt;int&gt;)</code>를 호출하면 됩니다.</p>\n<h5 id=\"mnist-classification-with-pytorch\" style=\"position:relative;\"><a href=\"#mnist-classification-with-pytorch\" aria-label=\"mnist classification with pytorch permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>MNIST classification with PyTorch</h5>\n<p>Tune 공식 페이지에 나와있는 MNIST classification 예시 중에서 hyper-parameter search 코드만 발췌하였습니다. 자세한 코드는 <a href=\"https://docs.ray.io/en/latest/tune/getting-started.html\">이곳</a>에서 참고하실 수 있습니다. 이 함수는 별도의 <strong>Ray Actor에서 실행</strong>되기 때문에 성능 결과를 main process에 있는 Tune으로 다시 보내줘야 합니다. 따라서 <code class=\"language-text\">tune.report</code>을 사용하여 Tune으로 결과를 보냅니다. </p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">train_mnist</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    mnist_transforms <span class=\"token operator\">=</span> transforms<span class=\"token punctuation\">.</span>Compose<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>transforms<span class=\"token punctuation\">.</span>ToTensor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> transforms<span class=\"token punctuation\">.</span>Normalize<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.1307</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0.3081</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    train_loader <span class=\"token operator\">=</span> DataLoader<span class=\"token punctuation\">(</span>datasets<span class=\"token punctuation\">.</span>MNIST<span class=\"token punctuation\">(</span><span class=\"token string\">\"~/data\"</span><span class=\"token punctuation\">,</span> train<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> download<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> transform<span class=\"token operator\">=</span>mnist_transforms<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> batch_size<span class=\"token operator\">=</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span> shuffle<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    test_loader <span class=\"token operator\">=</span> DataLoader<span class=\"token punctuation\">(</span>datasets<span class=\"token punctuation\">.</span>MNIST<span class=\"token punctuation\">(</span><span class=\"token string\">\"~/data\"</span><span class=\"token punctuation\">,</span> train<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> transform<span class=\"token operator\">=</span>mnist_transforms<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> batch_size<span class=\"token operator\">=</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span> shuffle<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n\n    device <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>device<span class=\"token punctuation\">(</span><span class=\"token string\">\"cuda\"</span> <span class=\"token keyword\">if</span> torch<span class=\"token punctuation\">.</span>cuda<span class=\"token punctuation\">.</span>is_available<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">else</span> <span class=\"token string\">\"cpu\"</span><span class=\"token punctuation\">)</span>\n    model <span class=\"token operator\">=</span> ConvNet<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    model<span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">(</span>device<span class=\"token punctuation\">)</span>\n\n    optimizer <span class=\"token operator\">=</span> optim<span class=\"token punctuation\">.</span>SGD<span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">.</span>parameters<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> lr<span class=\"token operator\">=</span>config<span class=\"token punctuation\">[</span><span class=\"token string\">\"lr\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> momentum<span class=\"token operator\">=</span>config<span class=\"token punctuation\">[</span><span class=\"token string\">\"momentum\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        train<span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">,</span> optimizer<span class=\"token punctuation\">,</span> train_loader<span class=\"token punctuation\">)</span>\n        acc <span class=\"token operator\">=</span> test<span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">,</span> test_loader<span class=\"token punctuation\">)</span>\n        tune<span class=\"token punctuation\">.</span>report<span class=\"token punctuation\">(</span>mean_accuracy<span class=\"token operator\">=</span>acc<span class=\"token punctuation\">)</span>\t<span class=\"token comment\"># Send the current training result back to Tune</span></code></pre></div>\n<p><code class=\"language-text\">tune.run</code>에 실행할 함수와 실험 옵션을 전달하면 <code class=\"language-text\">tune.run</code>은 <a href=\"https://docs.ray.io/en/latest/tune/api_docs/analysis.html#tune-analysis-docs\">ExperimentAnalysis</a> object를 반환합니다. ExperimentAnalysis를 통해 실험 결과를 확인할 수 있고, 아래의 코드처럼 가장 잘 훈련된 모델을 간단하게 불러올 수도 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">search_space <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"lr\"</span><span class=\"token punctuation\">:</span> tune<span class=\"token punctuation\">.</span>sample_from<span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> spec<span class=\"token punctuation\">:</span> <span class=\"token number\">10</span><span class=\"token operator\">**</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">10</span> <span class=\"token operator\">*</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>rand<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"momentum\"</span><span class=\"token punctuation\">:</span> tune<span class=\"token punctuation\">.</span>uniform<span class=\"token punctuation\">(</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.9</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\nanalysis <span class=\"token operator\">=</span> tune<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>train_mnist<span class=\"token punctuation\">,</span> config<span class=\"token operator\">=</span>search_space<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">dfs <span class=\"token operator\">=</span> analysis<span class=\"token punctuation\">.</span>trial_dataframes\n<span class=\"token punctuation\">[</span>d<span class=\"token punctuation\">.</span>mean_accuracy<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> d <span class=\"token keyword\">in</span> dfs<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n\ndf <span class=\"token operator\">=</span> analysis<span class=\"token punctuation\">.</span>results_df\nlogdir <span class=\"token operator\">=</span> analysis<span class=\"token punctuation\">.</span>get_best_logdir<span class=\"token punctuation\">(</span><span class=\"token string\">\"mean_accuracy\"</span><span class=\"token punctuation\">,</span> mode<span class=\"token operator\">=</span><span class=\"token string\">\"max\"</span><span class=\"token punctuation\">)</span>\nstate_dict <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>logdir<span class=\"token punctuation\">,</span> <span class=\"token string\">\"model.pth\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\nmodel <span class=\"token operator\">=</span> ConvNet<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nmodel<span class=\"token punctuation\">.</span>load_state_dict<span class=\"token punctuation\">(</span>state_dict<span class=\"token punctuation\">)</span></code></pre></div>\n<h5 id=\"early-stopping-with-asha\" style=\"position:relative;\"><a href=\"#early-stopping-with-asha\" aria-label=\"early stopping with asha permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Early Stopping with ASHA<sup id=\"fnref-2\"><a href=\"#fn-2\" class=\"footnote-ref\">2</a></sup></h5>\n<p>ASHA는 덜 유망한 실험을 종료하고 더 유망한 실험에 더 많은 시간과 자원을 할당하는 알고리즘입니다. ASHA는 Tune에서 Trial Scheduler로 구현되어 있으며 자세한 내용은 <a href=\"https://docs.ray.io/en/latest/tune/api_docs/schedulers.html#tune-schedulers\">TrialScheduler docs</a>에서 확인할 수 있습니다. 결과를 Jupyter notebook 혹은 tensorboard를 활용해 시각화하면 더욱 좋습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">analysis <span class=\"token operator\">=</span> tune<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>\n    train_mnist<span class=\"token punctuation\">,</span>\n    num_samples<span class=\"token operator\">=</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span>\n    scheduler<span class=\"token operator\">=</span>ASHAScheduler<span class=\"token punctuation\">(</span>metric<span class=\"token operator\">=</span><span class=\"token string\">\"mean_accuracy\"</span><span class=\"token punctuation\">,</span> mode<span class=\"token operator\">=</span><span class=\"token string\">\"max\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    config<span class=\"token operator\">=</span>search_space<span class=\"token punctuation\">)</span>\n\ndfs <span class=\"token operator\">=</span> analysis<span class=\"token punctuation\">.</span>trial_dataframes</code></pre></div>\n<h3 id=\"references\" style=\"position:relative;\"><a href=\"#references\" aria-label=\"references permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>References</h3>\n<ul>\n<li>Liaw, Richard, et al. \"Tune: A research platform for distributed model selection and training.\" <em>arXiv preprint arXiv:1807.05118</em> (2018).</li>\n<li>Li, Liam, et al. \"Massively parallel hyperparameter tuning.\" (2018).</li>\n<li><a href=\"https://docs.ray.io/en/latest/tune/index.html#tune-scalable-hyperparameter-tuning\">Tune: Scalable Hyperparameter Tuning</a></li>\n<li><a href=\"https://docs.ray.io/en/latest/ray-core/walkthrough.html#\">Ray Core Walkthrough</a></li>\n</ul>","tableOfContents":"<ul>\n<li>\n<p><a href=\"/Archive/22-04-07-Ray%20Tune/#ray-core\">Ray Core</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"/Archive/22-04-07-Ray%20Tune/#task-remote-function\">Task: Remote function</a></li>\n<li><a href=\"/Archive/22-04-07-Ray%20Tune/#object\">Object</a></li>\n<li><a href=\"/Archive/22-04-07-Ray%20Tune/#actor-remote-class\">Actor: Remote class</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"/Archive/22-04-07-Ray%20Tune/#key-components\">Key Components</a></li>\n<li>\n<p><a href=\"/Archive/22-04-07-Ray%20Tune/#examples\">Examples</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"/Archive/22-04-07-Ray%20Tune/#mnist-classification-with-pytorch\">MNIST classification with PyTorch</a></li>\n<li><a href=\"/Archive/22-04-07-Ray%20Tune/#early-stopping-with-asha\">Early Stopping with ASHA</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"/Archive/22-04-07-Ray%20Tune/#references\">References</a></li>\n</ul>","frontmatter":{"path":"/cheatsheet/22-04-07/","title":"Hyperparameter Tuning with Ray Tune","category":"Cheat Sheet","date":"2022-04-07"}}},"pageContext":{}},"staticQueryHashes":["2390655019","256249292","63159454"]}