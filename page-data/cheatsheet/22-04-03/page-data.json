{"componentChunkName":"component---src-templates-post-js","path":"/cheatsheet/22-04-03/","result":{"data":{"markdownRemark":{"html":"<blockquote>\n<p>toch.utils.data 공식 문서를 읽고 pytoch dataloder 사용법을 기록합니다.</p>\n</blockquote>\n<h3 id=\"dataloader\" style=\"position:relative;\"><a href=\"#dataloader\" aria-label=\"dataloader permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Dataloader</h3>\n<p><a href=\"https://pytorch.org/docs/stable/data.html#torch.utils.data.DataLoader\">torch.utils.data.DataLoader</a> class constructor arguments는 다음과 같습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">DataLoader<span class=\"token punctuation\">(</span>dataset<span class=\"token punctuation\">,</span> batch_size<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> shuffle<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> sampler<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span>\n           batch_sampler<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> num_workers<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> collate_fn<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span>\n           pin_memory<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> drop_last<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> timeout<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n           worker_init_fn<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> prefetch_factor<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n           persistent_workers<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"dataset\" style=\"position:relative;\"><a href=\"#dataset\" aria-label=\"dataset permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Dataset</h3>\n<p>PyTorch에서 지원하는 dataset의 타입은 두 가지가 있습니다.</p>\n<h5 id=\"map-style-datasets\" style=\"position:relative;\"><a href=\"#map-style-datasets\" aria-label=\"map style datasets permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Map-style datasets</h5>\n<ul>\n<li>Python <code class=\"language-text\">__getitem__()</code>, <code class=\"language-text\">__len__()</code> 기능 사용</li>\n<li>indices/keys로 부터 데이터 샘플을 매핑하는 방식</li>\n<li><code class=\"language-text\">dataset[idx]</code> 방식으로 데이터 읽음</li>\n</ul>\n<h5 id=\"iterable-style-datasets\" style=\"position:relative;\"><a href=\"#iterable-style-datasets\" aria-label=\"iterable style datasets permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Iterable-style datasets</h5>\n<ul>\n<li>Python <code class=\"language-text\">__iter__()</code> 기능 사용</li>\n<li>Random read 비용이 많이 들고 힘들거나, 가져온 데이터에 따라 배치 크기가 달라지는 경우에 유용</li>\n<li><code class=\"language-text\">iter(dataset)</code> 방식으로 데이터 읽음</li>\n<li>자세한 내용은 <a href=\"https://pytorch.org/docs/stable/data.html#torch.utils.data.IterableDataset\">IterableDataset</a> 참고</li>\n</ul>\n<h3 id=\"sampler\" style=\"position:relative;\"><a href=\"#sampler\" aria-label=\"sampler permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Sampler</h3>\n<p>Iterable-style dataset의 data loading 순서는 user-defined iterable을 통해 온전히 조작 가능합니다. 반면에, map-style dataset의 data loading에 사용되는 indices/keys의 순서는 <a href=\"https://pytorch.org/docs/stable/data.html#torch.utils.data.Sampler\">torch.utils.data.Sampler</a> class를 사용해 명시 가능합니다.</p>\n<ul>\n<li>Sampler는 dataset indices에 대한 iterable object를 나타냅니다. </li>\n<li>Sampler를 따로 정의하지 않더라도 Dataloader class constructor의 <code class=\"language-text\">shuffle</code> argument에 의해서 sequential(shuffle False인 경우) 혹은 shuffled(shuffle True인 경우) sampler가 자동으로 생성됩니다. 이 경우 <code class=\"language-text\">batch_size</code>와 <code class=\"language-text\">drop_last</code>를 목적에 따라 적절히 선택합시다.</li>\n<li>매번 list of batch indices를 뱉는 커스텀 Sampler를 새로 정의하는 경우에는, 해당 Sampler를 정의한 후에 Dataloader constructor의 <code class=\"language-text\">batch_sampler</code> argument에 전달하면 됩니다.</li>\n</ul>\n<h3 id=\"example-1\" style=\"position:relative;\"><a href=\"#example-1\" aria-label=\"example 1 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example 1.</h3>\n<p>가장 간단한 예시로 BatchSampler를 확인해보겠습니다. mini-batch SGD에서 사용되는 Sampler이며 아래의 코드는 <a href=\"https://pytorch.org/docs/stable/_modules/torch/utils/data/sampler.html#BatchSampler\">PyTorch 코드</a>를 보기 쉽게 정리한 것입니다.</p>\n<p><code class=\"language-text\">batch_size</code>를 통해 batch size를 결정하고 <code class=\"language-text\">drop_last</code>를 통해 데이터 셋 제일 마지막 나머지 부분을 버릴지 말지 결정합니다. </p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">BatchSampler</span><span class=\"token punctuation\">(</span>Sampler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> sampler<span class=\"token punctuation\">,</span> batch_size<span class=\"token punctuation\">,</span> drop_last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>sampler <span class=\"token operator\">=</span> sampler\n        self<span class=\"token punctuation\">.</span>batch_size <span class=\"token operator\">=</span> batch_size\n        self<span class=\"token punctuation\">.</span>drop_last <span class=\"token operator\">=</span> drop_last\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__iter__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        batch <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">for</span> idx <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>sampler<span class=\"token punctuation\">:</span>\n            batch<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>idx<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>batch<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> self<span class=\"token punctuation\">.</span>batch_size<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">yield</span> batch\n                batch <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>batch<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token keyword\">and</span> <span class=\"token keyword\">not</span> self<span class=\"token punctuation\">.</span>drop_last<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">yield</span> batch\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__len__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>drop_last<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>sampler<span class=\"token punctuation\">)</span> <span class=\"token operator\">//</span> self<span class=\"token punctuation\">.</span>batch_size\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>sampler<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> self<span class=\"token punctuation\">.</span>batch_size <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">//</span> self<span class=\"token punctuation\">.</span>batch_size</code></pre></div>\n<h3 id=\"example-2\" style=\"position:relative;\"><a href=\"#example-2\" aria-label=\"example 2 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example 2.</h3>\n<p>개인적으로 작업하고 있는 내용 중에서 서로 다른 두 개의 데이터 셋을 concat 해야하는 상황이 존재하여 아래와 같이 코드를 작성해 보았습니다.</p>\n<p>두 개의 데이터 셋을 입력으로 받아 <code class=\"language-text\">__getitem__</code>을 통해 이미지 데이터를 출력하는 ConcatDataset라는 이름의 map-style dataset을 제작하였습니다. <code class=\"language-text\">__getitem__</code>는 (데이터셋 index, 이미지 index) 형태의 indicies tuple을 입력으로 받습니다. 따라서 추후 custom sampler class에 indicies 순서 선정 방법을 명시해주면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ConcatDataset</span><span class=\"token punctuation\">(</span>torch<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>DataLoader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> first_dataset<span class=\"token punctuation\">,</span> second_dataset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>datasets <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>first_dataset<span class=\"token punctuation\">,</span> second_dataset<span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__len__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>dataset<span class=\"token punctuation\">.</span>__len__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> dataset <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>datasets<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__getitem__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> indicies<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        dataset_idx <span class=\"token operator\">=</span> indicies<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n        data_idx <span class=\"token operator\">=</span> indicies<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>datasets<span class=\"token punctuation\">[</span>dataset_idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>__getitem__<span class=\"token punctuation\">(</span>data_idx<span class=\"token punctuation\">)</span></code></pre></div>\n<p>indicies 선택을 위한 ConcatSampler class를 제작합니다. 저는 첫 번째 데이터 셋은 84 batch size, 두 번째 데이터 셋은 42 batch size, 총 126 batch size를 갖는 데이터로더가 필요하여 아래와 같이 코드를 작성하였습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ConcatSampler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> samplers<span class=\"token punctuation\">,</span> first_batch_size<span class=\"token operator\">=</span><span class=\"token number\">84</span><span class=\"token punctuation\">,</span> second_batch_size<span class=\"token operator\">=</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>samplers <span class=\"token operator\">=</span> samplers\n        self<span class=\"token punctuation\">.</span>batch_sizes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>first_batch_size<span class=\"token punctuation\">,</span> second_batch_size<span class=\"token punctuation\">]</span>\n        self<span class=\"token punctuation\">.</span>total_batch_size <span class=\"token operator\">=</span> first_batch_size <span class=\"token operator\">+</span> second_batch_size\n\n        <span class=\"token comment\"># Select larger number as n_batches</span>\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>samplers<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">//</span> first_batch_size <span class=\"token operator\">></span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>samplers<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">//</span> second_batch_size<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>n_batches <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>samplers<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">//</span> first_batch_size\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>n_batches <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>samplers<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">//</span> second_batch_size\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__iter__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>n_batches<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            batch <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n            <span class=\"token keyword\">for</span> dataset_idx <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">for</span> idx <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>samplers<span class=\"token punctuation\">[</span>dataset_idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n                    batch<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>dataset_idx<span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>batch<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> self<span class=\"token punctuation\">.</span>batch_sizes<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">and</span> dataset_idx <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                        <span class=\"token keyword\">break</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>batch<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> self<span class=\"token punctuation\">.</span>total_batch_size <span class=\"token keyword\">and</span> dataset_idx <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n                        <span class=\"token keyword\">break</span>\n            <span class=\"token keyword\">yield</span> batch\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__len__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>n_batches</code></pre></div>\n<p>실제 사용을 위해서 ConcatSampler와 ConcatDataset를 생성하고, 이를 DataLoader constructor argument로 전달합니다. train_loader를 사용하여 데이터를 로드했을 때, 첫 번째 데이터 셋에서는 84개의 데이터 샘플이, 두 번째 데이터 셋에서는 42개의 데이터 샘플이 로드됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">sampler <span class=\"token operator\">=</span> ConcatSampler<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>torch<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>sampler<span class=\"token punctuation\">.</span>RandomSampler<span class=\"token punctuation\">(</span>dataset<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> dataset <span class=\"token keyword\">in</span> <span class=\"token punctuation\">[</span>first_dataset<span class=\"token punctuation\">,</span> second_dataset<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\ndataset <span class=\"token operator\">=</span> ConcatDataset<span class=\"token punctuation\">(</span>first_dataset<span class=\"token punctuation\">,</span> second_dataset<span class=\"token punctuation\">)</span>\ntrain_loader <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>utils<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>DataLoader<span class=\"token punctuation\">(</span>dataset<span class=\"token punctuation\">,</span> batch_sampler<span class=\"token operator\">=</span>sampler<span class=\"token punctuation\">,</span> num_workers<span class=\"token operator\">=</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> pin_memory<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"references\" style=\"position:relative;\"><a href=\"#references\" aria-label=\"references permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>References</h3>\n<ul>\n<li><a href=\"https://pytorch.org/docs/stable/data.html#torch.utils.data.DataLoader\">https://pytorch.org/docs/stable/data.html#torch.utils.data.DataLoader</a></li>\n</ul>","tableOfContents":"<ul>\n<li><a href=\"/Archive/22-04-03-PyTorch%20Custom%20Dataloader/#dataloader\">Dataloader</a></li>\n<li>\n<p><a href=\"/Archive/22-04-03-PyTorch%20Custom%20Dataloader/#dataset\">Dataset</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"/Archive/22-04-03-PyTorch%20Custom%20Dataloader/#map-style-datasets\">Map-style datasets</a></li>\n<li><a href=\"/Archive/22-04-03-PyTorch%20Custom%20Dataloader/#iterable-style-datasets\">Iterable-style datasets</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"/Archive/22-04-03-PyTorch%20Custom%20Dataloader/#sampler\">Sampler</a></li>\n<li><a href=\"/Archive/22-04-03-PyTorch%20Custom%20Dataloader/#example-1\">Example 1.</a></li>\n<li><a href=\"/Archive/22-04-03-PyTorch%20Custom%20Dataloader/#example-2\">Example 2.</a></li>\n<li><a href=\"/Archive/22-04-03-PyTorch%20Custom%20Dataloader/#references\">References</a></li>\n</ul>","frontmatter":{"path":"/cheatsheet/22-04-03/","title":"PyTorch Custom Dataloader","category":"Cheat Sheet","date":"2022-04-03"}}},"pageContext":{}},"staticQueryHashes":["2390655019","256249292","63159454"]}