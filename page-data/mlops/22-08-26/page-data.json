{"componentChunkName":"component---src-templates-post-js","path":"/mlops/22-08-26/","result":{"data":{"markdownRemark":{"html":"<blockquote>\n<p>MLOps를 위한 도구들의 사용법을 명령어 위주로 정리하고 있습니다. 대부분은 공식 문서의 내용을 참고하고 있고, 그 외 내용을 참고하게 되는 경우에는 글 내용에 언급하거나 reference에 추가하고 있습니다. 현재는 공부 진행 상황에 따라서 내용을 계속해서 추가하는 중에 있습니다. </p>\n</blockquote>\n<h3 id=\"cicd\" style=\"position:relative;\"><a href=\"#cicd\" aria-label=\"cicd permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CI/CD</h3>\n<h5 id=\"github-actions\" style=\"position:relative;\"><a href=\"#github-actions\" aria-label=\"github actions permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>GitHub Actions</h5>\n<ul>\n<li>공식 문서: <a href=\"https://docs.github.com/ko/actions/using-workflows/workflow-syntax-for-github-actions\">GitHub Actions에 대한 워크플로 구문</a></li>\n<li>Workflows: 한 개 혹은 여러 개의 Job으로 구성되고, event나 스케줄 등에 의해 트리거될 수 있음</li>\n<li>Events: Workflow run을 트리거할 수 있는 activity</li>\n<li>Jobs: Same runner에 존재하는 workflow 내의 여러 단계들. 여러 jobs이 의존성을 가질 수 있고 병렬적 실행되는 것도 가능</li>\n<li>Actions: individual tasks that you can combine to create jobs and customize your workflow</li>\n<li>Runners: Workflow가 수행될 인스턴스. 일반적으로는 GitHub에서 호스팅해주는 runner를 사용하나 self-hosted runners도 가능</li>\n<li>Workflows 생성: github의 workflow template 활용하거나, <code class=\"language-text\">.github/workflows</code> 폴더 직접 생성</li>\n<li>\n<p><code class=\"language-text\">.yml</code> 파일 생성하고 내용 작성</p>\n<ul>\n<li><code class=\"language-text\">name</code>:  The name of the workflow as it will appear in the \"Actions\" tab of the GitHub</li>\n<li><code class=\"language-text\">run-name</code>: The name for workflow runs generated from the workflow, which will appear in the list of workflow runs on your repository's \"Actions\" tab</li>\n<li><code class=\"language-text\">on</code>: Trigger for this workflow. 즉, event를 의미하며 array로 작성시 여러 event 활용 가능</li>\n<li><code class=\"language-text\">jobs</code>: Groups together all the jobs that run in the workflow. 여러 Job에 대해 기본적으로는 병렬 수행</li>\n<li><code class=\"language-text\">jobs/${job_name}/runs-on</code>: 사용할 OS를 명시</li>\n<li><code class=\"language-text\">jobs/${job_name}/steps/uses</code>: 이미 만들어진 action이 있는 경우 어떤 action을 사용할지 명시</li>\n<li><code class=\"language-text\">jobs/${job_name}/steps/run</code>: runner 내에서 수행할 커맨드를 명시</li>\n</ul>\n</li>\n<li>그 외: 조직과 workflow 공유, secret key 저장, dependecy caching, artifact 저장 등의 기능도 수행 가능하니 공식 문서 참고하기</li>\n</ul>\n<h5 id=\"git-hooks\" style=\"position:relative;\"><a href=\"#git-hooks\" aria-label=\"git hooks permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Git Hooks</h5>\n<ul>\n<li>공식 문서: <a href=\"https://git-scm.com/book/ko/v2/Git%EB%A7%9E%EC%B6%A4-Git-Hooks\">Git맞춤 - Git Hooks</a></li>\n<li>GitHub Action은 remote에서 트리거에 따른 작업을 수행하지만, 로컬에서도 git hooks를 통해 특정 액션에 대한 특정 스크립트를 자동으로 실행할 수 있음. 또한 <strong>husky</strong>라는 Git Hooks를 보다 쉽게 적용할 수 있는 모듈 또한 존재함</li>\n<li><code class=\"language-text\">.git/hooks/{hook_name}</code>의 경로에 스크립트를 작성하면 끝</li>\n<li>\n<p>Commit workflow hooks</p>\n<ul>\n<li><code class=\"language-text\">pre-commit</code>: 커밋할 때 가장 먼저 호출되는 훅으로 커밋 메시지를 작성하기 전에 호출됨</li>\n<li><code class=\"language-text\">prepare-commit-msg</code>: Git이 커밋 메시지를 생성하고 나서 편집기를 실행하기 전에 실행됨. 사람이 커밋 메시지를 수정하기 전에 먼저 프로그램으로 손보고 싶을 때 사용</li>\n<li><code class=\"language-text\">commit-msg</code>: 커밋 메시지가 들어 있는 임시 파일의 경로를 아규먼트로 받는 훅. 그리고 이 스크립트가 0이 아닌 값을 반환하면 커밋되지 않음. 이 훅에서 최종적으로 커밋이 완료되기 전에 프로젝트 상태나 커밋 메시지를 검증 가능</li>\n<li><code class=\"language-text\">post-commit</code>: 커밋이 완료된 후에 실행되는 훅으로, 넘겨받는 아규먼트가 하나도 없지만 커밋 해시정보는 <code class=\"language-text\">git log -1 HEAD</code> 명령으로 가져올 수 있음. 일반적으로 커밋된 것을 누군가 혹은 다른 프로그램에게 알릴 때 사용</li>\n</ul>\n</li>\n<li>이 외에도 <code class=\"language-text\">pre-rebase</code>, <code class=\"language-text\">post-rewrite</code>, <code class=\"language-text\">post-merge</code>, <code class=\"language-text\">pre-push</code> 등의 hook과, server hooks인 <code class=\"language-text\">pre-receive</code>, <code class=\"language-text\">post-receive</code>, <code class=\"language-text\">update</code> 등도 존재함</li>\n</ul>\n<h5 id=\"husky\" style=\"position:relative;\"><a href=\"#husky\" aria-label=\"husky permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Husky</h5>\n<ul>\n<li>공식 문서: <a href=\"https://typicode.github.io/husky/#/\">Husky</a> </li>\n<li><code class=\"language-text\">npm install --save-dev husky</code>: Install</li>\n<li><code class=\"language-text\">npx husky install</code>: Enable Git hooks</li>\n<li><code class=\"language-text\">npm pkg set scripts.prepare=&quot;husky install&quot;</code>: Modify package.json for handling git hooks automatically</li>\n<li><code class=\"language-text\">npx husky add .husky/pre-commit &quot;{do_something}&quot;</code>: Git hooks 생성</li>\n<li><code class=\"language-text\">git add .husky/pre-commit</code></li>\n</ul>\n<h5 id=\"pre-commit\" style=\"position:relative;\"><a href=\"#pre-commit\" aria-label=\"pre commit permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>pre-commit</h5>\n<ul>\n<li>공식 문서: <a href=\"https://pre-commit.com\">https://pre-commit.com</a></li>\n<li>사용 가능한 pre-commit hooks 들은 <a href=\"https://pre-commit.com/hooks.html\">이곳</a>에서 확인 가능함</li>\n<li><code class=\"language-text\">brew install pre-commit</code>: Install</li>\n<li><code class=\"language-text\">pre-commit sample-config &gt; .pre-commit-config.yaml</code>: Create a config file</li>\n<li><code class=\"language-text\">pre-commit run</code>: 수동으로 pre-commit 실행하기</li>\n<li><strong><code class=\"language-text\">pre-commit install</code></strong>: commit 할 때 자동으로 pre-commit가 실행되도록 git hook에 등록</li>\n</ul>\n<h3 id=\"docker\" style=\"position:relative;\"><a href=\"#docker\" aria-label=\"docker permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Docker</h3>\n<h5 id=\"fast-start-for-a-beginner\" style=\"position:relative;\"><a href=\"#fast-start-for-a-beginner\" aria-label=\"fast start for a beginner permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Fast start for a beginner</h5>\n<ul>\n<li>아래의 명령어 수행하면서 작동 확인하기</li>\n<li><code class=\"language-text\">sudo usermod -aG docker $USER</code>: sudo 없이 사용할 수 있도록 사용자 계정을  docker gorup에 추가</li>\n<li><code class=\"language-text\">docker pull ubuntu:latest</code>: centos 최신 버전의 이미지를 pull</li>\n<li><code class=\"language-text\">docker images</code>: 이미지 확인</li>\n<li><code class=\"language-text\">docker run -it ubuntu:latest bash</code>: Bash shell을 실행하는 옵션으로 CentOS 컨테이너 실행</li>\n<li><code class=\"language-text\">docker ps -a</code>: 컨테이너 확인 (exited 컨테이너까지 확인)</li>\n<li><code class=\"language-text\">docker restart ${container_id}</code>: 컨테이너 다시 시작</li>\n<li><code class=\"language-text\">docker attach ${container_id}</code>: 컨테이너 안으로 이동</li>\n<li>컨테이너에 패키지나 프로그램 설치 후 exit</li>\n<li><code class=\"language-text\">docker commit ${container_id} ${new_image_name}</code>: 컨테이너로 부터 이미지 빌드</li>\n</ul>\n<h5 id=\"commands\" style=\"position:relative;\"><a href=\"#commands\" aria-label=\"commands permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Commands</h5>\n<ul>\n<li>\n<p><code class=\"language-text\">docker pull [OPTIONS] NAME[:TAG|@DIGEST]</code>: Docker Hub로부터 이미지 다운로드</p>\n<ul>\n<li>ex. <code class=\"language-text\">docker pull centos:latest</code></li>\n</ul>\n</li>\n<li><code class=\"language-text\">docker push [OPTIONS] NAME[:TAG]</code>: Docker Hub로 이미지 업로드</li>\n<li><code class=\"language-text\">docker create [OPTIONS] IMAGE [COMMAND] [ARG...]</code>: 이미지로부터 새 컨테이너 생성</li>\n<li><code class=\"language-text\">docker stop [OPTIONS] CONTAINER [CONTAINER...]</code>: 작동중인 컨테이너를 stop. (<em>memory release</em>)</li>\n<li><code class=\"language-text\">docker start [OPTIONS] CONTAINER [CONTAINER...]</code>: stop 상태의 컨테이너를 시작</li>\n<li>\n<p><code class=\"language-text\">docker run [OPTIONS] IMAGE [COMMAND] [ARG...]</code>: 이미지 다운로드 후, 컨테이너 생성(create) 후, 컨테이너 시작(start). 옵션은 <a href=\"https://docs.docker.com/engine/reference/commandline/run/#options\">이곳</a> 참고</p>\n<ul>\n<li>ex. <code class=\"language-text\">docker run -it centos:latest bash</code>: Shell 실행을 위해서 it 옵션을 사용</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">docker build [OPTIONS] PATH | URL | -</code>: Dockerfile로부터 이미지 빌드</p>\n<ul>\n<li><code class=\"language-text\">docker build -t ${new_image_name} .</code>: 현재 위치의 Dockerfile로부터 ${new<em>image</em>name} 이름의 이미지 빌드</li>\n</ul>\n</li>\n<li><code class=\"language-text\">docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]</code>: 컨테이너로 부터 이미지 빌드</li>\n<li><code class=\"language-text\">docker rename CONTAINER NEW_NAME</code>: 컨테이너 이름 변경</li>\n<li><code class=\"language-text\">docker pause CONTAINER [CONTAINER...]</code>: 작동중인 컨테이너를 pause. 컨테이너 프로세스를 stop하지는 않고 대기 시켜놓는 것 (<em>keep memory</em>).  kill, stop과의 차이점은 <a href=\"https://www.gistshare.com/2018/11/kill-stop-and-pause-docker-commands.html#summary\">이곳</a> 참고</li>\n<li><code class=\"language-text\">docker unpause CONTAINER [CONTAINER...]</code>: pause 상태의 컨테이너를 unpause</li>\n<li><code class=\"language-text\">docker exec [OPTIONS] CONTAINER COMMAND [ARG...]</code>: 작동중인 컨테이너에서 명령어 실행</li>\n<li><code class=\"language-text\">docker rm [OPTIONS] CONTAINER [CONTAINER...]</code>: 컨테이너 삭제</li>\n<li>\n<p><code class=\"language-text\">docker ps [OPTIONS]</code>: 컨테이너 목록 확인</p>\n<ul>\n<li><code class=\"language-text\">-a, --all</code>: 컨테이너는 종료되어도 삭제되지 않고 남아있기 때문에, -a 옵션 사용시 exited 컨테이너까지 확인 가능</li>\n</ul>\n</li>\n<li><code class=\"language-text\">docker logs [OPTIONS] CONTAINER</code>: 컨테이너 로그 보기</li>\n<li><code class=\"language-text\">docker stats [OPTIONS] [CONTAINER...]</code>: 컨테이너의 리소스 사용량 확인</li>\n<li><code class=\"language-text\">docker images [OPTIONS] [REPOSITORY[:TAG]]</code>: 이미지 목록 확인</li>\n<li><code class=\"language-text\">docker rmi [OPTIONS] IMAGE [IMAGE...]</code>: 이미지 삭제</li>\n</ul>\n<h5 id=\"run-options\" style=\"position:relative;\"><a href=\"#run-options\" aria-label=\"run options permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Run options</h5>\n<ul>\n<li><code class=\"language-text\">docker run --volume, -v</code>: 컨테이너 내부 디렉토리를 로컬 컴퓨터의 디렉토리에 마운트</li>\n<li><code class=\"language-text\">docker run -m 512m ${image}</code>: memory를 512m로 제한</li>\n<li><code class=\"language-text\">docker run -m 512m --memory-reservation=256m ${image}</code>: 메모리 부족시 활성화(예약)</li>\n<li><code class=\"language-text\">docker run --cpuset-cpus=&quot;0,1&quot; ${image}</code>: 1, 2번째 CPU 사용</li>\n<li><code class=\"language-text\">docker run --cpus=0.2 ${image}</code>: CPU의 20%만 사용</li>\n<li><code class=\"language-text\">docker run --cpus=2 --cpu-shares=2000 ${image}</code>: CPU 할당 우선순위 결정. 1024가 default</li>\n</ul>\n<h5 id=\"dockerfile\" style=\"position:relative;\"><a href=\"#dockerfile\" aria-label=\"dockerfile permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Dockerfile</h5>\n<p>이미지 제작을 하나의 파일로 관리 가능</p>\n<ul>\n<li><code class=\"language-text\">FROM [--platform=&lt;platform&gt;] &lt;image&gt;[:&lt;tag&gt;] [AS &lt;name&gt;]</code>: 베이스 이미지를 지정. 반드시 하나는 지정해야 함</li>\n<li><code class=\"language-text\">RUN &lt;command&gt;</code> 혹은 <code class=\"language-text\">RUN [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;]</code> (exec form): 명령어를 그대로 실행. Linux에서는 내부적으로 <code class=\"language-text\">/bin/sh -c</code> 뒤에 명령어를 실행</li>\n<li><code class=\"language-text\">WORKDIR /path/to/workdir</code>: 작업을 위한 기본 디렉토리 설정</li>\n<li><code class=\"language-text\">VOLUME [&quot;/data&quot;]</code>: 컨테이너 외부 파일시스템 마운트 지점 설정</li>\n<li><code class=\"language-text\">COPY [--chown=&lt;user&gt;:&lt;group&gt;] &lt;src&gt;... &lt;dest&gt;</code>: 파일이나 디렉토리를 이미지로 복사</li>\n<li><code class=\"language-text\">ADD [--chown=&lt;user&gt;:&lt;group&gt;] &lt;src&gt;... &lt;dest&gt;</code>:  파일이나 디렉토리를 이미지로 복사. URL도 입력 가능</li>\n<li><code class=\"language-text\">EXPOSE &lt;port&gt; [&lt;port&gt;/&lt;protocol&gt;...]</code>: 컨테이너가 실행 시 listen할 포트 설정</li>\n<li><code class=\"language-text\">ENV &lt;key&gt;=&lt;value&gt; ...</code>: 컨테이너에서 사용할 환경변수 지정</li>\n<li><code class=\"language-text\">CMD [&quot;executable&quot;,&quot;param1&quot;,&quot;param2&quot;]</code>: 컨테이너가 실행되었을 때 실행되는 기본 명령어. shell form 형태는 <a href=\"https://docs.docker.com/engine/reference/builder/#cmd\">이곳</a> 참고</li>\n<li><code class=\"language-text\">LABEL &lt;key&gt;=&lt;value&gt; &lt;key&gt;=&lt;value&gt; &lt;key&gt;=&lt;value&gt; ...</code>: 이미지에 메타데이터 추가. 메타데이터 통해 이미지에 대한 정보 쉽게 파악 가능</li>\n<li><strong><code class=\"language-text\">RUN --mount=type=ssh ...</code></strong>: private repo clone 하거나 private package 다운을 위해 ssh key mount. 더 자세한 내용은 <a href=\"https://stackoverflow.com/questions/55929417/how-to-securely-git-clone-pip-install-a-private-repository-into-my-docker-image\">스택오버플로우 답변</a> 참고 (Other approaches:  <a href=\"https://medium.com/@erika_dike/installing-package-from-a-private-repo-in-your-docker-container-f45b1a4954a2\">link1</a>, <a href=\"https://vsupalov.com/build-docker-image-clone-private-repo-ssh-key/\">link2</a>)</li>\n</ul>\n<h5 id=\"compose-file\" style=\"position:relative;\"><a href=\"#compose-file\" aria-label=\"compose file permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Compose file</h5>\n<p>멀티 컨테이너 어플리케이션 관리를 위한 파일로, 컨테이너 실행에 필요한 옵션이나, 실행 순서, 의존성 등의 내용을 하나의 파일로 관리 가능. 아래는 <code class=\"language-text\">docker-compose.yml</code> 파일 예시</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"3.9\"</span>\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">web</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">build</span><span class=\"token punctuation\">:</span> .\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"8000:5000\"</span>\n    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> .<span class=\"token punctuation\">:</span>/code\n      <span class=\"token punctuation\">-</span> logvolume01<span class=\"token punctuation\">:</span>/var/log\n    <span class=\"token key atrule\">links</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> redis\n  <span class=\"token key atrule\">redis</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> redis\n<span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">logvolume01</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">version</code>: 첫 줄에 적는 compose file format 버전.  3만 적으면 버전 3 중에서 최신 버전 사용. 자세한 내용은 <a href=\"%EC%B2%AB%20%EC%A4%84%EC%97%90%20%EC%A0%81%EB%8A%94\">이곳</a> 참고</li>\n<li><code class=\"language-text\">services</code>: 실행하려는 컨테이너들을 정의. 위 예시에는 web과 redis라는 두 개의 서비스 존재</li>\n<li><code class=\"language-text\">build</code>: docker build 명령 실행할 디렉터리 경로</li>\n<li><code class=\"language-text\">ports</code>: 사용할 포트 (HOST:CONTAINER)</li>\n<li><code class=\"language-text\">volumes</code>: 로컬 컴퓨터의 디렉토리에 마운트</li>\n<li><code class=\"language-text\">links</code>: 다른 서비스 컨테이너와의 네트워크 링크를 정의 (SERVICE:ALIAS 혹은 SERVICE). 컴포즈 파일 버전 3 이후로는 links 사용하지 않더라도 한 네트워크 안에 있는 서비스끼리 통신가능</li>\n<li><code class=\"language-text\">image</code>: 해당 서비스가 사용할 이미지</li>\n<li><code class=\"language-text\">docker-compose up [options] [--scale SERVICE=NUM...] [SERVICE...]</code>: <code class=\"language-text\">docker-compose.yml</code> 파일 따라 서비스 실행</li>\n<li><code class=\"language-text\">docker-compose down [options]</code>: 서비스 지움</li>\n<li><code class=\"language-text\">docker-compose start [SERVICE...]</code>: stop 되어있던 서비스 시작</li>\n<li><code class=\"language-text\">docker-compose stop [options] [SERVICE...]</code>: 서비스 stop</li>\n<li><code class=\"language-text\">docker-compose ps</code>: 현재 실행중인 서비스 상태 확인</li>\n</ul>\n<h3 id=\"fastapi\" style=\"position:relative;\"><a href=\"#fastapi\" aria-label=\"fastapi permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>FastAPI</h3>\n<h5 id=\"run-options-1\" style=\"position:relative;\"><a href=\"#run-options-1\" aria-label=\"run options 1 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Run Options</h5>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">uvicorn main:app --reload --host 0.0.0.0 --port 5000</code></pre></div>\n<ul>\n<li><code class=\"language-text\">main</code>: main.py 파일 의미</li>\n<li><code class=\"language-text\">app</code>: main.py 파일 안의 <code class=\"language-text\">app=FastAPI()</code></li>\n<li><code class=\"language-text\">--reload</code>: 코드 변경 시 저장 후 재시작</li>\n<li><code class=\"language-text\">--host</code>: 모든 접근 허용은 0.0.0.0</li>\n<li><code class=\"language-text\">--port</code>: 포트 설정</li>\n</ul>\n<h3 id=\"mlflow\" style=\"position:relative;\"><a href=\"#mlflow\" aria-label=\"mlflow permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>MLflow</h3>\n<p>MLflow의 4가지 주요 기능</p>\n<ul>\n<li>\n<p>Tracking: ML 실험과 관련된 모든 결과물을 기록 및 조회하기 위한 기능 제공</p>\n<ul>\n<li><code class=\"language-text\">log_metric</code>,<code class=\"language-text\">log_param</code>, <code class=\"language-text\">log_artifacts</code> , <code class=\"language-text\">mlflow ui</code></li>\n</ul>\n</li>\n<li>\n<p>Project: 재현을 위한 패키징 기능 제공</p>\n<ul>\n<li><code class=\"language-text\">mlflow run [로컬저장소 혹은 원격저장소]</code></li>\n</ul>\n</li>\n<li>Models: 다양한 플랫폼에서 모델 배포 및 추론을 관리하기 위한 기능 제공 (key concept: <strong><em>flavors</em></strong>)</li>\n<li>Model Registry: 전체 라이프사이클을 공동 관리하기 위한 central model store 제공</li>\n</ul>\n<h5 id=\"mlflow-tracking\" style=\"position:relative;\"><a href=\"#mlflow-tracking\" aria-label=\"mlflow tracking permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>MLflow Tracking</h5>\n<p>Tensorboard나 wandb charts 처럼 metrics, artifcats, tags, notes, parameter 정보들을 기록하기 위한 기능</p>\n<ul>\n<li><code class=\"language-text\">mlflow.set_tracking_uri()</code>: tracking URI 연결. MLFLOW_TRACKING_URI 환경변수를 사용해서 연결하는 것도 가능하며, tracking server를 원격으로 두는 경우에 http/https uri 사용도 가능</li>\n<li><code class=\"language-text\">mlflow.create_experiment()</code> 혹은 MLFLOW_EXPERIMENT_NAME 환경 변수를 사용하여 실험을 특정 그룹단위로 묶어 관리 가능</li>\n<li><code class=\"language-text\">mlflow.start_run()</code> 사용시 하나의 active run을 리턴. Logging function 사용시 자동으로 호출되긴 함. 당연히 <code class=\"language-text\">mlflow.end_run()</code>도 존재</li>\n<li><code class=\"language-text\">mlflow.log_param()</code>, <code class=\"language-text\">mlflow.log_metric()</code>, <code class=\"language-text\">mlflow.set_tag()</code>, <code class=\"language-text\">mlflow.log_artifact()</code> 등을 통해 parameter, metric, tag, artifact 기록</li>\n<li>Scikit-learn, Gluon, PyTorch, Fastai 등에 대해서는 log 함수를 직접 명시하지 않아도 알아서 자동으로 logging 해주는 <strong><code class=\"language-text\">mlflow.autolog()</code></strong> 기능 존재</li>\n<li>MLflow를 사용하여 tracking server를 따로 구축하는 경우에는 <a href=\"https://mlflow.org/docs/latest/tracking.html#mlflow-tracking-servers\">이곳</a> 참고</li>\n</ul>\n<h5 id=\"mlflow-projects\" style=\"position:relative;\"><a href=\"#mlflow-projects\" aria-label=\"mlflow projects permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>MLflow Projects</h5>\n<p>MLflow Project는 다른 엔지니어들이 나의 코드를 돌릴 수 있도록 organizing, describing하는 convention임. 따라서 간단히 요약하면 아래의 과정이 전부임</p>\n<ol>\n<li><code class=\"language-text\">MLProject</code> 파일에 <strong>Name</strong>, <strong>Entry point</strong>, <strong>Environment</strong> properties에 대한 정보를 명시. Entry point는 프로젝트 내에서 실행될 명령어와 해당 명령의 파라미터 정보들을 의미하며, environments는 conda, virtualenv 같은 실행 환경을 의미</li>\n<li><code class=\"language-text\">mlflow run</code> CLI 명령어 혹은 <code class=\"language-text\">mlflow.projects.run()</code> 파이썬 API를 사용하여 프로젝트 실행</li>\n</ol>\n<p><code class=\"language-text\">MLproject</code> 파일 예시 (<a href=\"https://github.com/shibuiwilliam/ml-system-in-actions\">ml-system-in-actions</a> 참고)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">name: cifar10_initial\n\ndocker_env:\n  image: shibui/ml-system-in-actions:training_pattern_cifar10_0.0.1\n  volumes: [&quot;$(pwd)/data:/opt/data&quot;, &quot;/tmp/ml-system-in-actions/chapter2_training/cifar10/mlruns:/tmp/mlruns&quot;]\n\nentry_points:\n  train:\n    parameters:\n      upstream: {type: string, default: &quot;&quot;}\n      downstream: {type: string, default: /opt/data/model/}\n      epochs: {type: int, default: 1}\n\t\t\t...\n    command: |\n      python -m src.train \\\n        --upstream {upstream} \\\n        --downstream {downstream} \\\n        --epochs {epochs} \\\n\t\t\t\t...</code></pre></div>\n<p>Kubernetes에서 MLflow 프로젝트를 실행하는 방법은 다음과 같음</p>\n<ol>\n<li><code class=\"language-text\">MLproject</code> 파일에 도커 환경 명시</li>\n<li>Backend configuration JSON 생성. <code class=\"language-text\">kube-context</code>, <code class=\"language-text\">repository-uri</code>, <code class=\"language-text\">kube-job-template-path</code> 정보 기입. 자세한 내용은 <a href=\"https://mlflow.org/docs/latest/projects.html#execution-guide\">이곳</a> 참고</li>\n<li>필요한 경우 도커나 쿠버네티스 리소스 접근을 위한 자격 증명을 얻고, MLflow CLI나 파이썬 API 사용하여 프로젝트 실행</li>\n</ol>\n<h5 id=\"mlflow-models\" style=\"position:relative;\"><a href=\"#mlflow-models\" aria-label=\"mlflow models permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>MLflow Models</h5>\n<p>다양한 downstream tools에서 ML 모델을 사용하기 위해 패키징하는 기능. 여기에 \"flavor\"이라는 컨셉이 등장하는데, 이는 사용하는 downstream tool이 무엇인지를 의미함</p>\n<p><code class=\"language-text\">my_model</code>이라는 프로젝트 폴더가 있다고 가정하고 해당 프로젝트를 배포하고자 할 때, 먼저 프로젝트 폴더 내에 관련 모델, 환경 파일들을 구비하고, <code class=\"language-text\">MLmodel</code> 파일을 기술하고, <code class=\"language-text\">mlflow models serve -m my_model</code> 명령어를 통해 모델을 배포할 수 있음</p>\n<p><code class=\"language-text\">MLmodel</code> 파일 예시 (<a href=\"https://mlflow.org/docs/latest/models.html#id19\">mlflow docs</a> 참고). 해당 예시는 sklearn과 python, 2개의 flavor로 이루어짐 </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">time_created: 2018-05-25T17:28:53.35\n\nflavors:\n  sklearn:\n    sklearn_version: 0.19.1\n    pickled_model: model.pkl\n  python_function:\n    loader_module: mlflow.sklearn</code></pre></div>\n<p><code class=\"language-text\">MLmodel</code> 파일의 field로는 <code class=\"language-text\">flavors</code> 뿐만 아니라, <code class=\"language-text\">time_created</code>, <code class=\"language-text\">run_id</code>, <code class=\"language-text\">signature</code>, <code class=\"language-text\">input_example</code>, <code class=\"language-text\">databricks_runtime</code>, <code class=\"language-text\">mlflow_version</code>가 존재할 수 있음</p>\n<ul>\n<li>Signature: 모델의 input, output을 기술. <code class=\"language-text\">mlflow.models.signature</code> 모듈의 기능들 사용하여 로깅 가능</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">signature:\n    inputs: &#39;[{&quot;name&quot;: &quot;images&quot;, &quot;dtype&quot;: &quot;uint8&quot;, &quot;shape&quot;: [-1, 28, 28, 1]}]&#39;\n    outputs: &#39;[{&quot;shape&quot;: [-1, 10], &quot;dtype&quot;: &quot;float32&quot;}]&#39;</code></pre></div>\n<ul>\n<li>Input example: 유효한 모델 input 예시</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># each input has shape (4, 4)\ninput_example = np.array([\n   [[  0,   0,   0,   0],\n    [  0, 134,  25,  56],\n    [253, 242, 195,   6],\n    [  0,  93,  82,  82]],\n   [[  0,  23,  46,   0],\n    [ 33,  13,  36, 166],\n    [ 76,  75,   0, 255],\n    [ 33,  44,  11,  82]]\n], dtype=np.uint8)\nmlflow.keras.log_model(..., input_example=input_example)</code></pre></div>\n<p>Built-in model flavors는 <a href=\"https://mlflow.org/docs/latest/models.html#built-in-model-flavors\">이곳</a>에서 확인할 수 있으며, <code class=\"language-text\">mlflow.pyfunc</code>, <code class=\"language-text\">mlflow.tensorflow</code>, <code class=\"language-text\">mlflow.pytorch</code> 등의 모듈 형태로 정의되어 있음</p>\n<p>Built-In Deployment Tools은 크게 4가지 형태로 생각해볼 수 있음. 자세한 내용 <a href=\"https://mlflow.org/docs/latest/models.html#built-in-deployment-tools\">이곳</a> 참고</p>\n<ul>\n<li>Deploy locally</li>\n<li>Deploy on Microsoft Azure ML</li>\n<li>Deploy on Amazon SageMaker</li>\n<li>Export model as an Apache Spark UDF</li>\n</ul>\n<h5 id=\"mlflow-model-registry\" style=\"position:relative;\"><a href=\"#mlflow-model-registry\" aria-label=\"mlflow model registry permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>MLflow Model Registry</h5>\n<p>UI workflow와 API workflow로 구분지을 수 있으며, API workflow의 대략적인 사용법은 다음과 같음</p>\n<ul>\n<li>MLflow 모델을 model registry에 추가:  <code class=\"language-text\">log_model()</code>, <code class=\"language-text\">mlflow.register_model()</code></li>\n<li>Model registry로 부터 모델 fetching: <code class=\"language-text\">load_model()</code></li>\n<li>Model registry로 부터 모델 serving: <code class=\"language-text\">mlflow models serve -m ...</code></li>\n<li>\n<p>모델 정보 변경</p>\n<ul>\n<li>모델 description 추가 및 수정: <code class=\"language-text\">update_model_version()</code></li>\n<li>모델 renaming: <code class=\"language-text\">rename_registered_model()</code></li>\n<li>모델 stage 변경: <code class=\"language-text\">transition_model_version_stage()</code></li>\n</ul>\n</li>\n<li>모델 탐색: <code class=\"language-text\">list_registered_models()</code>, <code class=\"language-text\">search_model_versions()</code></li>\n<li>모델 삭제: <code class=\"language-text\">delete_model_version()</code></li>\n</ul>\n<h3 id=\"kubernetes\" style=\"position:relative;\"><a href=\"#kubernetes\" aria-label=\"kubernetes permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Kubernetes</h3>\n<h3 id=\"kubeflow\" style=\"position:relative;\"><a href=\"#kubeflow\" aria-label=\"kubeflow permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Kubeflow</h3>\n<h5 id=\"istio\" style=\"position:relative;\"><a href=\"#istio\" aria-label=\"istio permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Istio</h5>\n<h3 id=\"design-patterns\" style=\"position:relative;\"><a href=\"#design-patterns\" aria-label=\"design patterns permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Design Patterns</h3>\n<p><a href=\"https://github.com/mercari/ml-system-design-pattern\">이곳</a>을 참고하여 디자인 패턴 별 핵심 내용을 한 줄씩 정리합니다. </p>\n<h5 id=\"training-patterns\" style=\"position:relative;\"><a href=\"#training-patterns\" aria-label=\"training patterns permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Training patterns</h5>\n<ul>\n<li>\n<p>Pipeline training pattern: 각 작업을 개별 자원으로 분할하여 별도로 구축하는 패턴. 각 작업의 독립성을 높일 수 있다는 장점과 관리가 복잡해진다는 단점 존재</p>\n<ul>\n<li>MLflow 활용하면 빠르게 프로토타이핑 가능</li>\n</ul>\n</li>\n<li>\n<p>Batch training pattern: 모델 학습을 정기적으로 수행하여, 모델을 항상 최신 상태로 유지하는 패턴</p>\n<ul>\n<li>cron과 같은 스케줄링 시스템 활용</li>\n</ul>\n</li>\n<li>Antipattern 1. Only-me pattern: 개인 환경에서 모델을 개발하였지만 다른 사람이 해당 시스템을 재현할 수 없는 상태</li>\n<li>Antipattern 2. Too many pipes pattern: 당연하게도 복잡한 파이프라인은 관리하기 매우 어려움</li>\n</ul>\n<h5 id=\"serving-patterns\" style=\"position:relative;\"><a href=\"#serving-patterns\" aria-label=\"serving patterns permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Serving patterns</h5>\n<ul>\n<li>\n<p>Web single pattern: 하나의 모델을 하나의 추론 서버를 사용하여 동기적으로 추론하는 가장 단순한 패턴</p>\n<ul>\n<li>학습된 모델을 ONNX, FastAPI, Unicorn, Gunicorn를 활용한 웹 싱글 패턴으로 제작하고 Docker로 감싸 빠르게 프로토타이핑 가능</li>\n</ul>\n</li>\n<li>\n<p>Synchronous pattern: 서비스 내 여러 작업들이 모델의 추론 결과에 의존하는(순서대로 실행되어야 하는) 패턴</p>\n<ul>\n<li>추론 모델은 ONNX, TensorFlow Serving 등으로 구성 후에, REST API, gRPC 등으로 요청 및 응답을 주고 받는 형태</li>\n</ul>\n</li>\n<li>\n<p>Asynchronous pattern: 추론 결과가 오래 걸리는 경우에 사용자에게 비동기적으로 대기 메세지를 제공하면 조작을 멈추지 않으면서도 추론 작업을 수행할 수 있음</p>\n<ul>\n<li>요청 서버와 추론 서버 사이에 queue(Apache Kafka) 혹은 cache(Rabbit MQ, Redis Cache) 서버를 구축해두고, 추론 서버에서 해당 queue, cache를 지속적으로 풀링하여, 대기 중인 작업이 있으면 추론 수행</li>\n</ul>\n</li>\n<li>\n<p>Batch pattern: 대량의 데이터(시간 단위, 월 단위의 데이터)를 하나로 정리하여 추론하고 싶은 경우 사용하는 패턴</p>\n<ul>\n<li>cron과 같은 스케줄링 시스템 활용. 관련하여 Kubernetes에는 CronJobs라는 도구 존재</li>\n</ul>\n</li>\n<li>\n<p>Prep-pred pattern: 전처리와 추론에서 필요로 하는 리소스가 크게 다른 경우에, 전처리와 추론을 서로 다른 컨테이너로 분리하여 유지 보수성을 향상시키는 패턴</p>\n<ul>\n<li>데이터 취득, 전처리, 추론 등의 서버를 각각 구축하고, 이 앞단에 proxy 서버를 구비하여 gRPC(혹은 REST API)를 통해 요청 및 응답을 주고 받도록 구성</li>\n</ul>\n</li>\n<li>\n<p>Microservice vertical pattern: 여러 개의 추론기로 구성되는 시스템에서 추론기 사이의 의존성이 명확하고, 실행 순서가 정해져 있는 경우에 사용하는 패턴</p>\n<ul>\n<li>앞단에 proxy 서버를 구비하여 gRPC(혹은 REST API)를 통해 요청 및 응답을 주고 받도록 구성</li>\n</ul>\n</li>\n<li>Microservice horizontal pattern: 의존 관계가 없는 여러 개의 추론을 병렬로 실행하는 패턴</li>\n<li>\n<p>Prediction cache pattern: 동일한 요청에 대해 캐시를 활용하여 속도를 향상시키는 패턴</p>\n<ul>\n<li>Redis 활용</li>\n</ul>\n</li>\n<li>Data cache pattern: 데이터, 전처리된 데이터를 캐시하고 데이터를 매우 빠르게 취득하는 것을 목적으로하는 패턴 </li>\n<li>\n<p>Serving template pattern: 유사한 추론기를 여러 개 만들 때에, 추론기의 학습이나 모델과 관련없는 부분(OS, 네트워크, 보안, 로그 수집)을 개발상의 규칙으로 공통화하는 패턴</p>\n<ul>\n<li>파이썬 템플릿 엔진 jinja2를 활용하여 템플릿 작성 가능</li>\n</ul>\n</li>\n<li>Antipattern 1. Online bigsize pattern: 웹 서비스라면 요청에 대해 N초 안에 응답, 배치 처리라면 야간 N시간 내 전체 레코드를 완료해야하는 등 최대 소요 시간 내에 서비스가 작동할 수 있어야 함</li>\n<li>Antipattern 2. All-in-one pattern: 시스템 내의 모든 모델이 하나의 서버에서 가동되면 장애 대응 어려움</li>\n</ul>\n<h5 id=\"operation-patterns\" style=\"position:relative;\"><a href=\"#operation-patterns\" aria-label=\"operation patterns permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Operation patterns</h5>\n<ul>\n<li>\n<p>Model-in-image pattern: 추론기의 이미지에 모델 파일을 포함해서 빌드하는 패턴. 서버 이미지와 모델의 버전을 일치시킬 수 있지만, 학습한 모델의 수 만큼 서버 이미지의 수도 늘어난다는 단점 존재</p>\n<ul>\n<li>도커 이미지는 DockerHub에 두고, Kubernetes의 Masnifest용 YAML 파일에 사용할 리소스를 정의하는 방식</li>\n</ul>\n</li>\n<li>\n<p>Model-load pattern: 서버 이미지보다 추론 모델의 버전을 더 빈번하게 갱신하여거나, 동일한 서버 이미지로 여러 종류의 추론 모델 가동이 필요한 경우에, 모델 파일을 이미지 내에 포함시키지 않고 외부에서 다운로드해서 사용하는 패턴</p>\n<ul>\n<li>모델 파일은 AWS S3, GCP Storage에 저장 후, Kubernetes의 init container 기능 사용하여 컨테이너 초기화 시 모델 파일 다운로드</li>\n</ul>\n</li>\n<li>\n<p>Prediction log pattern: 클라이언트 이벤트 로그, 프록시 서버 지연 로그, 추론 서버 로그 등을 로그 스토리지에 저장하여 서비스를 개선하는 패턴</p>\n<ul>\n<li>로그 수집 기반으로는 queue나 Kubernetes의 Fluentd sidecar 기능 활용</li>\n</ul>\n</li>\n<li>Prediction monitoring pattern: 로그를 감시하는 도중 경향이 비정상적인 경우에 운영자에게 통보하고자 하는 패턴. Prediction log pattern에서의 로그 스토리지를 바라보고 있는 감시 시스템을 추가하면 됨</li>\n<li>\n<p>Parameter-based serving pattern: 추론 결과를 룰 베이스로 제어하고자 하는 패턴</p>\n<ul>\n<li>추론기마다 룰 베이스 제어에 사용할 변수를 환경 변수의 형태로 설정</li>\n</ul>\n</li>\n<li>\n<p>Condition-based-serving pattern: 각 그룹에 맞는 모델을 만들고 룰 베이스로 요청을 배분하는 패턴. 요청 지역에 따라, 요청 시간대에 따라 적합한 추론 모델을 골라 응답 가능</p>\n<ul>\n<li>추론 시스템은 Kubernetes 클러스터에 구축하고, 조건 분기는 Istio로 제어. Istio의 VirtualServie에는 요청의 헤더에 따라 요청의 전송처를 제어하는 기능이 내장되어 있으므로 이를 활용</li>\n</ul>\n</li>\n<li>Antipattern 1. No logging pattern: 로그가 없다면 시스템을 개선할 수 없음</li>\n<li>Antipattern 2. Nobody knows pattern: 시스템 구축 이후에 운영하는 사람이 떠난 경우. 해당 시스템이 정확히 어떻게 동작하는 것인지 아무도 모르는 상태가 된다면 당연히 운용 및 개선 불가</li>\n</ul>\n<h5 id=\"qa-patterns\" style=\"position:relative;\"><a href=\"#qa-patterns\" aria-label=\"qa patterns permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>QA patterns</h5>\n<ul>\n<li>\n<p>Loading test pattern: 추론 서버의 응답 속도를 측정</p>\n<ul>\n<li>vegeta attack 활용</li>\n</ul>\n</li>\n<li>\n<p>Prediction circuit break pattern: 서버 액세스가 증가하는데 바로 서버의 스케일 아웃이 불가능한 경우에, 일부 요청을 일부러 처리하지 않도록 하여 서버 중단을 방지하는 패턴</p>\n<ul>\n<li>Istio의 트래픽 관리 기능으로 서킷브레이커가 이미 내장되어 있음. 부하 테스트로는 vegeta attack 활용</li>\n</ul>\n</li>\n<li>\n<p>Shadow AB-testing pattern: 새로운 추론 모델이 실제 환경에서 문제 없이 작동하는지 확인하기 위한 패턴. Proxy서버가 현행 모델과 새로운 추론 모델에 둘 다 요청을 보내지만, 실제 응답은 현행 모델에게서만 받도록 구성</p>\n<ul>\n<li>Istio의 VirtualService를 활용. VirtualService를 사용하여 트래픽 미러링</li>\n</ul>\n</li>\n<li>\n<p>Online AB-testing pattern: 요청의 일부를 새로운 추론기를 통해 응답하여 사용자의 반응을 확인하는 패턴</p>\n<ul>\n<li>Istio의 VirtualService를 활용. VirtualService를 사용하여 트래픽 분할</li>\n</ul>\n</li>\n<li>Antipattern 1. Offline-only pattern: 테스트셋으로만 모델을 검증하는 패턴. 모델을 판단하는 기준은 언제나 테스트 데이터가 아니라 실제 서비스 상황에서의 데이터여야 함</li>\n</ul>\n<h3 id=\"references\" style=\"position:relative;\"><a href=\"#references\" aria-label=\"references permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>References</h3>\n<ul>\n<li><a href=\"https://docs.docker.com/reference/\">Docker docs - Reference documentation</a></li>\n<li><a href=\"https://mlflow.org/docs/latest/index.html\">MLflow documentation</a></li>\n<li><a href=\"https://github.com/mercari/ml-system-design-pattern\">https://github.com/mercari/ml-system-design-pattern</a></li>\n<li><a href=\"https://mercari.github.io/ml-system-design-pattern/README_ko.html\">https://mercari.github.io/ml-system-design-pattern/README_ko.html</a></li>\n</ul>","tableOfContents":"<ul>\n<li>\n<p><a href=\"/MachineLearning/22-08-26-Machine%20Learning%20Operations%20(MLOps)/#cicd\">CI/CD</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"/MachineLearning/22-08-26-Machine%20Learning%20Operations%20(MLOps)/#github-actions\">GitHub Actions</a></li>\n<li><a href=\"/MachineLearning/22-08-26-Machine%20Learning%20Operations%20(MLOps)/#git-hooks\">Git Hooks</a></li>\n<li><a href=\"/MachineLearning/22-08-26-Machine%20Learning%20Operations%20(MLOps)/#husky\">Husky</a></li>\n<li><a href=\"/MachineLearning/22-08-26-Machine%20Learning%20Operations%20(MLOps)/#pre-commit\">pre-commit</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"/MachineLearning/22-08-26-Machine%20Learning%20Operations%20(MLOps)/#docker\">Docker</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"/MachineLearning/22-08-26-Machine%20Learning%20Operations%20(MLOps)/#fast-start-for-a-beginner\">Fast start for a beginner</a></li>\n<li><a href=\"/MachineLearning/22-08-26-Machine%20Learning%20Operations%20(MLOps)/#commands\">Commands</a></li>\n<li><a href=\"/MachineLearning/22-08-26-Machine%20Learning%20Operations%20(MLOps)/#run-options\">Run options</a></li>\n<li><a href=\"/MachineLearning/22-08-26-Machine%20Learning%20Operations%20(MLOps)/#dockerfile\">Dockerfile</a></li>\n<li><a href=\"/MachineLearning/22-08-26-Machine%20Learning%20Operations%20(MLOps)/#compose-file\">Compose file</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"/MachineLearning/22-08-26-Machine%20Learning%20Operations%20(MLOps)/#fastapi\">FastAPI</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"/MachineLearning/22-08-26-Machine%20Learning%20Operations%20(MLOps)/#run-options-1\">Run Options</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"/MachineLearning/22-08-26-Machine%20Learning%20Operations%20(MLOps)/#mlflow\">MLflow</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"/MachineLearning/22-08-26-Machine%20Learning%20Operations%20(MLOps)/#mlflow-tracking\">MLflow Tracking</a></li>\n<li><a href=\"/MachineLearning/22-08-26-Machine%20Learning%20Operations%20(MLOps)/#mlflow-projects\">MLflow Projects</a></li>\n<li><a href=\"/MachineLearning/22-08-26-Machine%20Learning%20Operations%20(MLOps)/#mlflow-models\">MLflow Models</a></li>\n<li><a href=\"/MachineLearning/22-08-26-Machine%20Learning%20Operations%20(MLOps)/#mlflow-model-registry\">MLflow Model Registry</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"/MachineLearning/22-08-26-Machine%20Learning%20Operations%20(MLOps)/#kubernetes\">Kubernetes</a></li>\n<li>\n<p><a href=\"/MachineLearning/22-08-26-Machine%20Learning%20Operations%20(MLOps)/#kubeflow\">Kubeflow</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"/MachineLearning/22-08-26-Machine%20Learning%20Operations%20(MLOps)/#istio\">Istio</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"/MachineLearning/22-08-26-Machine%20Learning%20Operations%20(MLOps)/#design-patterns\">Design Patterns</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"/MachineLearning/22-08-26-Machine%20Learning%20Operations%20(MLOps)/#training-patterns\">Training patterns</a></li>\n<li><a href=\"/MachineLearning/22-08-26-Machine%20Learning%20Operations%20(MLOps)/#serving-patterns\">Serving patterns</a></li>\n<li><a href=\"/MachineLearning/22-08-26-Machine%20Learning%20Operations%20(MLOps)/#operation-patterns\">Operation patterns</a></li>\n<li><a href=\"/MachineLearning/22-08-26-Machine%20Learning%20Operations%20(MLOps)/#qa-patterns\">QA patterns</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"/MachineLearning/22-08-26-Machine%20Learning%20Operations%20(MLOps)/#references\">References</a></li>\n</ul>","frontmatter":{"path":"/mlops/22-08-26/","title":"Machine Learning Operations (MLOps)","category":"MLOps","date":"2022-08-26"}}},"pageContext":{}},"staticQueryHashes":["2390655019","256249292","63159454"]}